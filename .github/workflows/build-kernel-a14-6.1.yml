name: Build Android 14 6.1 GKI Kernels (Battery & Performance Optimized)

on:
  workflow_call:

jobs:
  build-kernel-a14-6-1-kernelsu-susfs:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - android_version: "android14"
            kernel_version: "6.1"
            sub_level: "25"
            os_patch_level: "2023-10"

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="${{ matrix.android_version }}-${{ matrix.kernel_version }}-${{ matrix.sub_level }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      - name: Download prebuilt toolchain
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg

          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          git clone https://github.com/TheWildJames/AnyKernel3.git
          git clone https://gitlab.com/simonpunk/susfs4ksu.git
          git clone https://github.com/TheWildJames/kernel_patches.git

      - name: Initialize and Sync Kernel Source
        run: |
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          FORMATTED_BRANCH="${{ matrix.android_version }}-${{ matrix.kernel_version }}-${{ matrix.os_patch_level }}"
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: Add KernelSU
        run: |
          cd "$CONFIG"
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next

      - name: Apply Performance & Battery Optimization Config
        run: |
          cd "$CONFIG"
          echo "Applying performance and battery optimizations..."

          # CPU 调度优化
          echo "CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_SCHEDUTIL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_ENERGY_AWARE_SCHED=y" >> ./common/arch/arm64/configs/gki_defconfig

          # GPU 省电优化
          echo "CONFIG_DRM_PANEL_SELF_REFRESH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DRM_SELF_REFRESH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_FRAME_BOOST=y" >> ./common/arch/arm64/configs/gki_defconfig

          # 电源管理优化
          echo "CONFIG_PM_AUTOSLEEP=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CPU_IDLE_GOV_LADDER=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CPU_IDLE_GOV_MENU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CPUFREQ_GOV_CONSERVATIVE=y" >> ./common/arch/arm64/configs/gki_defconfig

          # AI 省电优化
          echo "CONFIG_AI_MEMORY_RECLAIM=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_AI_DYNAMIC_FREQ=y" >> ./common/arch/arm64/configs/gki_defconfig

      - name: Apply Kernel Patches
        run: |
          cd "$CONFIG"
          patch -p1 < ../kernel_patches/battery_saving_tweaks.patch
          patch -p1 < ../kernel_patches/game_mode_performance.patch

      - name: Build the Kernel
        run: |
          cd "$CONFIG"
          tools/bazel build --config=fast --lto=thin //common:kernel_aarch64_dist

      - name: Create Bootimgs Folder and Copy Images
        run: |
          cd "$CONFIG"
          mkdir bootimgs
          cp ./bazel-bin/common/kernel_aarch64/Image bootimgs
          gzip -n -k -f -9 ./bootimgs/Image > ./bootimgs/Image.gz

      - name: Create and Sign Boot Images
        run: |
          cd bootimgs
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH

      - name: Create ZIP Files for Different Formats
        run: |
          cd AnyKernel3
          mv ../bootimgs/Image ./Image
          zip -r "../AnyKernel3.zip" ./*
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: optimized-kernel-${{ env.CONFIG }}
          path: |
            AnyKernel3.zip
            bootimgs/boot.img
