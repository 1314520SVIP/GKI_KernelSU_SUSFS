name: Build Android 14 6.1 GKI Kernels

on:
  workflow_call:  # This allows this workflow to be called from another workflow
  
jobs:
  build-kernel-a14-6-1-kernelsu-susfs:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - android_version: "android14"
            kernel_version: "6.1"
            sub_level: "25"
            os_patch_level: "2023-10"
        # 其他矩阵配置保持注释状态...
        # - android_version: "android14"
        #   kernel_version: "6.1"
        #   sub_level: "43"
        #   os_patch_level: "2023-11"
        # ...其他矩阵项

    steps:
      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/llvm.list') }}
          restore-keys: |
            ${{ runner.os }}-apt-
            
      - name: Install Build Dependencies
        run: |
          # 修复GPG命令
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/llvm-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/llvm-archive-keyring.gpg] http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main" | sudo tee /etc/apt/sources.list.d/llvm.list
          
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang-17 lld-17 \
            libc6-dev \
            libncurses-dev \
            flex \
            bison \
            openssl \
            libssl-dev \
            libelf-dev
          sudo ln -sf /usr/bin/clang-17 /usr/bin/clang
          sudo ln -sf /usr/bin/ld.lld-17 /usr/bin/ld.lld
    
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="${{ matrix.android_version }}-${{ matrix.kernel_version }}-${{ matrix.sub_level }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      - name: Download prebuilt toolchain
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: Set boot sign key
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ ! -z "$BOOT_SIGN_KEY" ]; then
            echo "$BOOT_SIGN_KEY" > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          else
            echo "BOOT_SIGN_KEY is not set. Exiting..."
            exit 1
          fi
          
      - name: Install Repo
        run: |
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          ANYKERNEL_BRANCH="${{ matrix.android_version }}-${{ matrix.kernel_version }}"
          SUSFS_BRANCH="gki-${{ matrix.android_version }}-${{ matrix.kernel_version }}"
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/TheWildJames/kernel_patches.git
      
      - name: Initialize and Sync Kernel Source
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          echo "Initializing and syncing kernel source..."
          FORMATTED_BRANCH="${{ matrix.android_version }}-${{ matrix.kernel_version }}-${{ matrix.os_patch_level }}"
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            echo "Found deprecated branch: $FORMATTED_BRANCH"
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          $REPO --version
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next

      - name: Apply SUSFS Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          echo "Applying SUSFS patches..."
          cp ../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU-Next/
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ matrix.android_version }}-${{ matrix.kernel_version }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cd ./KernelSU-Next
          patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true
          cd ../common
          patch -p1 < 50_add_susfs_in_gki-${{ matrix.android_version }}-${{ matrix.kernel_version }}.patch || true
          
      - name: Apply Next-SUSFS Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          echo "Applying next SUSFS patches..."
          cp ../kernel_patches/apk_sign.c_fix.patch ./
          patch -p1 -F 3 < apk_sign.c_fix.patch
          cp ../kernel_patches/core_hook.c_fix.patch ./
          patch -p1 --fuzz=3 < core_hook.c_fix.patch
          cp ../kernel_patches/selinux.c_fix.patch ./
          patch -p1 -F 3 < selinux.c_fix.patch

      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/common"
          cp ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch || true

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          echo "Adding configuration settings to gki_defconfig..."
          # SUSFS基础配置
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          # 骁龙8 Gen3性能配置
          echo "CONFIG_UCLAMP_TASK=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_UCLAMP_TASK_GROUP=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_SCHED_WALT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_SCHED_TUNE=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_ENERGY_MODEL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CPU_FREQ_GOV_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DRM_PANEL_FREQUENCY=120" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEVFREQ_GOV_QCOM_ADRENO_TZ=y" >> ./common/arch/arm64/configs/gki_defconfig

      - name: Apply Snapdragon 8 Gen3 Optimizations
        run: |
          echo "Applying Snapdragon 8 Gen3 optimizations..."
          cd "$CONFIG/common"
          
          # 调度优化
          sed -i '/CONFIG_SCHED_WALT/c\CONFIG_SCHED_WALT=y' ./arch/arm64/configs/gki_defconfig
          sed -i '/CONFIG_SCHED_TUNE/c\CONFIG_SCHED_TUNE=y' ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_ENERGY_MODEL=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y" >> ./arch/arm64/configs/gki_defconfig
          
          # GPU优化
          echo "CONFIG_MSM_KGSL_GPU_FREQ_VOTE=1" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_MSM_KGSL_GPU_BUS_MODERATE=1" >> ./arch/arm64/configs/gki_defconfig
          
          # 内存优化
          echo "CONFIG_CMA_DEBUGFS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CMA_AREAS=19" >> ./arch/arm64/configs/gki_defconfig

      - name: Fix Missing build.config.gki
        run: |
          cd "$CONFIG/common" || { echo "Error: Directory $CONFIG/common not found!"; exit 1; }
          if [ ! -f "build.config.gki" ]; then
            echo "Creating build.config.gki..."
            touch build.config.gki
          fi
          echo "KERNEL_DIR=common" >> build.config.gki
          echo "CLANG_VERSION=clang-r487747c" >> build.config.gki
          echo "BUILD_CONFIG=common/build.config.gki.aarch64" >> build.config.gki

      - name: Configure Game Mode
        run: |
          cd "$CONFIG/common"
          mkdir -p ./game_mode
          echo "# 默认游戏列表" > ./game_mode/wqvb.txt
          echo "com.tencent.tmgp.pubgmhd" >> ./game_mode/wqvb.txt
          echo "com.mobile.legends" >> ./game_mode/wqvb.txt
          
          echo "CONFIG_GAME_TUNING=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_INPUT_BOOST=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_SCHED_GAME=y" >> ./arch/arm64/configs/gki_defconfig

      - name: Run sed and perl Commands
        run: |
          cd "$CONFIG"
          sed -i 's/check_defconfig//' ./common/build.config.gki
          sed -i '$s|echo "\$res"|echo "-android14-11-g71b43c3e005a-ab10734328"|' ./common/scripts/setlocalversion
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Sat Apr 20 04:20:00 UTC 2024"}' ./common/scripts/mkcompile_h

      - name: Build the Kernel
        run: |
          cd "$CONFIG"
          echo "Building the kernel..."
          # 设置工具链路径
          export PATH=/usr/bin:$PATH
          export CC=clang
          export LD=ld.lld
          
          # 清理构建环境（使用Bazel clean替代make）
          tools/bazel clean
          
          # 验证工具链
          clang --version
          ld.lld --version
          
          # 新增：获取Bazel实际输出路径
          BAZEL_OUTPUT_BASE=$(tools/bazel info output_base)
          echo "BAZEL_OUTPUT_BASE=$BAZEL_OUTPUT_BASE" >> $GITHUB_ENV
          
          # 构建命令增加详细日志
          tools/bazel build --config=fast --lto=thin //common:kernel_aarch64_dist \
            --action_env=KMI_SYMBOL_LIST_STRICT_MODE=0 \
            --define=android_arm64.image_type=normal \
            --copt=-fno-stack-protector \
            --linkopt=-fuse-ld=lld \
            --color=yes \
            --subcommands=pretty_print \
            --verbose_failures
            
          # 修正产物路径查找逻辑
          IMAGE_PATH=$(find bazel-out/ -type f -name "Image" -print -quit)
          if [ -z "$IMAGE_PATH" ]; then
            echo "Error: Kernel image not found!"
            find . -name "Image" -print
            exit 1
          fi
          
          echo "Found kernel image at: $IMAGE_PATH"
          mkdir -p ../kernel-artifacts
          cp $IMAGE_PATH ../kernel-artifacts/Image
          echo "IMAGE_PATH=$(realpath ../kernel-artifacts/Image)" >> $GITHUB_ENV

      - name: Build Performance Kernel
        run: |
          cd "$CONFIG"
          # 设置工具链环境变量
          export PATH=/usr/bin:$PATH
          export CC=clang
          export LD=ld.lld
          
          # 应用性能配置
          echo "CONFIG_SCHED_GAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CPU_FREQ_GOV_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          # 重新构建性能版内核（增加清洁步骤）
          tools/bazel clean
          tools/bazel build --config=fast --lto=thin //common:kernel_aarch64_dist \
            --action_env=KMI_SYMBOL_LIST_STRICT_MODE=0 \
            --define=android_arm64.image_type=performance \
            --copt=-fno-stack-protector \
            --linkopt=-fuse-ld=lld \
            --subcommands=pretty_print \
            --verbose_failures

          # 动态定位性能版镜像路径
          PERFORMANCE_IMAGE_PATH=$(find bazel-out/ -type f -name "Image" -print -quit)
          if [ -z "$PERFORMANCE_IMAGE_PATH" ]; then
            echo "Error: Performance kernel image not found!"
            find . -name "Image" -print
            exit 1
          fi
          
          echo "Found performance image at: $PERFORMANCE_IMAGE_PATH"
          mkdir -p ../kernel-artifacts
          cp $PERFORMANCE_IMAGE_PATH ../kernel-artifacts/performance-Image
          echo "PERFORMANCE_IMAGE_PATH=$(realpath ../kernel-artifacts/performance-Image)" >> $GITHUB_ENV

      - name: Create Bootimgs Folder and Copy Images
        run: |
          mkdir -p bootimgs
          echo "Copying build artifacts..."
          
          # 使用环境变量中的正确路径
          cp $IMAGE_PATH ./Image
          cp $PERFORMANCE_IMAGE_PATH ./performance-Image
          
          # 增强文件验证
          for img in Image performance-Image; do
            if [ ! -f "$img" ]; then
              echo "Missing $img! Available files:"
              ls -l
              exit 1
            fi
            file "$img" | grep "Linux kernel ARM64" || { echo "Invalid kernel image: $img"; exit 1; }
          done
          
          ls -lh Image performance-Image
          gzip -n -k -f -9 ./Image
          cp Image* performance-Image* bootimgs/
          echo "Boot images prepared:"
          ls -l bootimgs/

      - name: Package Kernel Images
        run: |
          # 配置文件存在性检查
          [ -f "$GITHUB_WORKSPACE/$CONFIG/common/arch/arm64/configs/gki_defconfig" ] || { echo "gki_defconfig not found!"; exit 1; }
          cd bootimgs
          export BUILD_DATE=$(date +%Y%m%d)
          
          # 性能模式配置修改
           (
          cd "$GITHUB_WORKSPACE/$CONFIG/common/arch/arm64/configs"
          echo "CONFIG_SCHED_GAME=y" >> gki_defconfig
          echo "CONFIG_CPU_FREQ_GOV_PERFORMANCE=y" >> gki_defconfig
           )
          
          # 标准镜像
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) \
            --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          
          # 性能模式镜像（需要先构建性能版）
          if [ -f ../performance-Image ]; then
            $MKBOOTIMG --header_version 4 --kernel ../performance-Image --output boot-performance.img
            $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) \
              --image boot-performance.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          fi

      - name: Create ZIP Files
        run: |
          echo "Creating zip files for all formats..."
          cd ./AnyKernel3
          
          # 标准版
          ZIP_NAME="AnyKernel3-${{ matrix.android_version }}-${{ matrix.kernel_version }}.${{ matrix.sub_level }}_${{ matrix.date }}.zip"
          mv ../Image ./Image
          zip -r "../$ZIP_NAME" ./*
          rm ./Image
          
          # GZ压缩版
          ZIP_NAME="AnyKernel3-gz-${{ matrix.android_version }}-${{ matrix.kernel_version }}.${{ matrix.sub_level }}_${{ matrix.date }}.zip"
          mv ../Image.gz ./Image.gz
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.gz

          # LZ4压缩版 
          ZIP_NAME="AnyKernel3-lz4-${{ matrix.android_version }}-${{ matrix.kernel_version }}.${{ matrix.sub_level }}_${{ matrix.date }}.zip"
          mv ../Image.lz4 ./Image.lz4
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.lz4

      - name: Create Game Mode ZIP
        run: |
          cd AnyKernel3
          mkdir -p modules
          cp ../common/game_mode/wqvb.txt ./modules/
          
          # 高性能版
          mv ../bootimgs/performance-Image ./Image
          zip -r9 ../AnyKernel3-Performance-${{ matrix.android_version }}-${{ matrix.kernel_version }}.zip * -x .git*
          
          # 标准版
          mv ../bootimgs/Image ./
          zip -r9 ../AnyKernel3-Standard-${{ matrix.android_version }}-${{ matrix.kernel_version }}.zip * -x .git*

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.CONFIG }}
          path: |
            *.zip
            *.img
