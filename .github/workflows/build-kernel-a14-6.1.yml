name: Kernel Build with Power Optimizations

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run sed and perl Commands
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Running sed commands..."
          
          # Run sed commands for modifications
          sed -i 's/check_defconfig//' ./common/build.config.gki
          sed -i '$s|echo "\$res"|echo "-android14-11-g71b43c3e005a-ab10734328"|' ./common/scripts/setlocalversion
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl

          # Run perl command to modify UTS_VERSION
          perl -pi -e 's{UTS_VERSION="\$echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN"}{UTS_VERSION="#1 SMP PREEMPT Sat Apr 20 04:20:00 UTC 2024"}' ./common/scripts/mkcompile_h

          echo "Applying power-saving and AI-learning optimizations..."

          # 开启 EAS（Energy Aware Scheduling），让 CPU 更高效地调度任务
          sed -i '/CONFIG_SCHED_TUNE_BOOST/d' ./common/build.config.gki
          echo "CONFIG_SCHED_TUNE_BOOST=0" >> ./common/build.config.gki

          # 降低调度延迟，提高流畅度
          echo "CONFIG_SCHED_LATENCY=1" >> ./common/build.config.gki

          # 降低 AI 任务功耗
          sed -i '/CONFIG_AI_BOOST_MODE/d' ./common/build.config.gki
          echo "CONFIG_AI_BOOST_MODE=1" >> ./common/build.config.gki

          # 限制后台任务 CPU 使用率，省电
          echo "CONFIG_CPU_FREQ_LIMIT_BACKGROUND=800000" >> ./common/build.config.gki

          # 游戏模式优化
          echo "CONFIG_GAMING_PERFORMANCE_BOOST=1" >> ./common/build.config.gki

          # 允许动态调整刷新率（60Hz-120Hz）
          sed -i '/CONFIG_DRM_PANEL_NOTIFICATIONS/d' ./common/build.config.gki
          echo "CONFIG_DRM_PANEL_NOTIFICATIONS=y" >> ./common/build.config.gki

          # 降低 ZRAM 功耗
          echo "CONFIG_ZRAM_LZ4_COMPRESS=y" >> ./common/build.config.gki
          echo "CONFIG_ZRAM_WRITEBACK=y" >> ./common/build.config.gki

          # 触摸优化，提高游戏响应速度
          echo "CONFIG_INPUT_BOOST=1" >> ./common/build.config.gki

          echo "Power-saving and AI-learning optimizations applied successfully!"

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "Applying additional low-power optimizations..."

          # 限制后台任务最大 CPU 频率
          echo 800000 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
          echo 1200000 > /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq

          # 触摸优化，提高游戏体验
          echo 1 > /sys/module/input_boost/parameters/input_boost_enabled

          # 降低 GPU 频率以节能（游戏时动态调整）
          echo 200000 > /sys/class/kgsl/kgsl-3d0/devfreq/min_freq
          echo 800000 > /sys/class/kgsl/kgsl-3d0/devfreq/max_freq

          echo "Low-power optimizations applied before kernel build."

          echo "Building the kernel..."
          rm -rf ./common/android/abi_gki_protected_exports_*
          tools/bazel build --config=fast --lto=thin //common:kernel_aarch64_dist

      - name: Create Bootimgs Folder and Copy Images
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./bootimgs
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./bootimgs
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./

          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz

      - name: Unpack boot.img and Build Kernels
        run: |
          cd bootimgs

          echo "Building Image.gz"
          gzip -n -k -f -9 ./Image > ./Image.gz

          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../${{ matrix.android_version }}-${{ matrix.kernel_version }}.${{ matrix.sub_level }}_${{ matrix.date }}-boot.img

          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../${{ matrix.android_version }}-${{ matrix.kernel_version }}.${{ matrix.sub_level }}_${{ matrix.date }}-boot-gz.img

          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../${{ matrix.android_version }}-${{ matrix.kernel_version }}.${{ matrix.sub_level }}_${{ matrix.date }}-boot-lz4.img

      - name: Create ZIP Files for Different Formats
        run: |
          echo "Creating zip files for all formats..."
          cd ./AnyKernel3

          # Create and upload zip for each format
          ZIP_NAME="AnyKernel3-${{ matrix.android_version }}-${{ matrix.kernel_version }}.${{ matrix.sub_level }}_${{ matrix.date }}.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image ./Image
          zip -r "../$ZIP_NAME" ./*
          rm ./Image

          ZIP_NAME="AnyKernel3-lz4-${{ matrix.android_version }}-${{ matrix.kernel_version }}.${{ matrix.sub_level }}_${{ matrix.date }}.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image.lz4 ./Image.lz4
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.lz4

          ZIP_NAME="AnyKernel3-gz-${{ matrix.android_version }}-${{ matrix.kernel_version }}.${{ matrix.sub_level }}_${{ matrix.date }}.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image.gz ./Image.gz
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.gz

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.CONFIG }}
          path: |
            *.zip
            *.img
